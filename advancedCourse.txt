
### Exceptions ###
   - In java we have three types of exceptions
     1. Checked Exceptions : The exceptions which are checked by compiler at compile time.
     2. Unchecked Exceptions : The exceptions which are not checked by compiler at compile time (Runtime exceptions).
        * NullPointerException
        * ArithmeticException
        * IllegalArgumentException
        * IndexOutOfBoundsException
        * IllegalStateException
     3. Errors : The exceptions which are not checked by compiler at compile time and we can't handle them.
        * StackOverflowError
        * OutOfMemoryError (infinitely recursion)


   - Exception Hierarchy
   -Object
     - Throwable
       - Error
       - Exception(checkedException)
            - RuntimeException(uncheckedException)


    - Exception Handling
     * sometimes the order of catch blocks is important. for example if we start with an IOException catch block
       and then follow it with a FileNotFoundException catch block, the FileNotFoundException catch block will never
       be reached, because a FileNotFoundException is a subclass of IOException and the upper casting is happened implicitly.
       so we need to start with more specific exception and then follow it with more general exception.

     * Defencive Programming : we mustn't handle all exceptions.
       -in some exception we mustn't handle them cause they must be corrected by programmer.for example if we have a
        NullPointerException it means that we have a bug in our code, and we must correct it. so we mustn't handle it.
        instead we throw an exception.
      - Because using this approach can be noisy, we mustn't use it in all our methods and classes, instead we use it just
        when we get input from the user or from external sources. so at the boundary of our application.


     * Exceptions channing : it's about throwing a general exception and pass the specific exception as a cause
       in this way we can have a general exception of a class that throws all exceptions of this class.





### Generics ### : generics are used to create classes, interfaces and methods that take types as parameters.
   *Note1 : we can't instantiate T type directly inside our generic class, because we don't know what type it is.
        so we walk around this by : private T[] items = (T[]) new Object[10]; with that we perform:
        1. "Create an array of 10 memory spaces that can hold references to objects (initially set to null)."
        2. "I want to treat this array as if it's an array of type T, and I'll make sure that I only add elements of type T into it."
            This casting allows us to work with the array as if it's a generic array of type T, even though, under the hood, it's an
            array of Object references. It's a workaround to leverage arrays while dealing with Java's type erasure in generics.

   *Note2 : we can't use primitives as generic type parameters, because generics are implemented using type erasure.
            so we can't use int, double, char, boolean, float, long, short, byte, or any other primitive type as
            a generic type parameter. we can use only reference types. Instead, we can use the wrapper classes for
            these primitive types: Integer, Double, Character, Boolean, Float, Long, Short, Byte.

          - when working with Integer for example we have which we called boxing and unboxing:
            Integer myIntValue = 56; boxing : the compiler will convert this to Integer.valueOf(56);
            int myInt = myIntValue; // unboxing : the compiler will convert this to myIntValue.intValue();


### Constraints: we can use extends keyword to specify a type or an interface that the type must subclass of or
    implement the interface we choose. we can use multiple bounds by using & operator. and T will be a bound type.



### Generics under the hood:

1. **Type Erasure Basics**:
   - Generic types in Java provide type safety at compile-time. You can use placeholders like `T` to indicate that
     a class or method can work with different types.
   - However, at runtime, Java erases the generic type information. This means that the actual type parameter `T`
     is replaced with its upper bound or with `Object` if there's no bound. This process is known as type erasure.

2. **Erasure Replaces with Object**:
   - When Java performs type erasure, it essentially replaces generic type parameters like `T` with the `Object` class.
   - This is similar to non-generic code where you could store any object in a collection, but with generics, you gain
     compile-time type checking.

3. **Type Bounds and Constraints**:
   - If you specify type bounds or constraints on your generic type, Java's type erasure replaces `T` with the bound type.
   - For example, if you have a constraint like `<T extends Comparable<T>>`, then `T` will be replaced with `Comparable<T>`.
     This means that your generic class or method works with objects that implement the `Comparable` interface.

4. **Multiple Constraints**:
   - If you have multiple type constraints on your generic type, Java chooses the leftmost constraint for type erasure.
   - For instance, if you have `<T extends Serializable & Comparable<T>>`, `T` will be replaced with `Serializable`.

    So, Java's generic type erasure is a mechanism to provide type safety at compile time while preserving
    compatibility with older non-generic code at runtime. It replaces generic type parameters with their bounds or
    with `Object`, and when there are multiple bounds, it selects the leftmost one during type erasure.




 ### Type Erasure and bounds:
 1. We can't use `private T[] items = (T[]) new Object[10];` when working with bounded type parameters.
 2. The reason is that in Java, due to something called "type erasure," the actual type `T` gets replaced
    by its bound type at runtime. In this case, the bound type is `Comparable`.
 3. Now, trying to cast `Object[]` to `Comparable[]` isn't allowed in Java. This restriction exists to ensure
    type safety, preventing objects that are not comparable from sneaking into the array.
 4. Instead, we opt for a safer alternative: `private List<T> items = new ArrayList<>();`.
 5. Lists in Java aren't affected by the same type erasure limitations as arrays. So, using a `List<T>`
    allows us to work with generic types, even when they have a specific bound type like `Comparable`,
    in a way that's both safe and effective.


### Generic Methods:
1. Generic methods are methods that introduce their own type parameters.
2. We can declare generic methods inside a non-generic class.
3. They give us type safety and code reusability.

### Multiple Type Parameters:
1. We can declare multiple type parameters in a generic class or method.
2. By convention, if we have two parameters, we use 'K' for the key and 'V' for the value.


### Generic classes and inheritance:(generics are invariant)
  - Imagine you have two classes, A and B, where B is a special type of A, meaning it inherits from A.
    Now, you have a method called XMethod that can work with any generic class, let's call it D. But there's a
    catch: D must be a generic class that takes A as a type parameter, which means XMethod accepts D<A>.

    Here's the tricky part: Even though B is a "child" of A (B inherits from A), you can't use D<B> with XMethod.
    It won't work because D<B> is not considered the same as D<A>, even though B is a type of A.

    In simpler terms, just because B is like A, it doesn't mean D<B> is like D<A> when it comes to generic classes
    and methods. It's a bit like having a specific tool for one job and trying to use it for a similar but not quite
    the same job.


### Wildcards:
  - To solve the problem of invariant generic classes and methods, Java introduced wildcards. Wildcards are a way to
    tell the compiler that a generic type can be of any type, even if it's a subclass of another type. and we can use
    wildcards in three ways:
    1. Upper Bounded Wildcards: `<? extends T>` : it means that the type parameter can be any type that is a subtype of T.
       we use it to read from a generic type.
    2. Lower Bounded Wildcards: `<? super T>` : it means that the type parameter can be any type that is a supertype of T.
       we use it to write to a generic type.
    3. Unbounded Wildcards: `<?>` : it means that the type parameter can be any type. we use it when we want to accept
       any type of generic type.

  ** Summary of the four cases:
  Case 1: Specific to User, no wildcards.
  Case 2: Unbounded wildcard (<?>), read-only, can't add elements.
  Case 3: Upper bounded wildcard (<? extends User>), read-only, can't add elements, but accepts any subtype of User.
  Case 4: Lower bounded wildcard (<? super User>), write-only (for User or its superclasses), read as Object.
  The choice of which wildcard to use depends on the flexibility and constraints of the method. Unbounded wildcards
  (<?>) provide the most flexibility but are read-only, while upper and lower bounded wildcards offer more specific constraints
  but with limitations on adding elements or retrieving specific types.