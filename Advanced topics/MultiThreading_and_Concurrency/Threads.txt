
1- what is the difference between Threads and Processes?
   * A process is an instance of a program, and in a process you can have multiple threads that share the same memory space,
     and work together to achieve a common goal. like a web server that has multiple threads to handle multiple requests.
     We can think of a process as an image of our code that has some memory and a bunch of other resources.

   * Threads are a sequence of instructions, practically speaking, a thread is that thing that executes our code.
     Threads are the smallest unit of execution that our OS can schedule.

   * Most newer CPUs have many cores, and those cores can be used for running multiple processes or threads.


2- Threads in java:
   * is a sequence of instructions within a process that can be executed independently in a parallel way.
   * Every thread has a priority. Threads with higher priority are executed in preference to threads with lower priority.
   * in java we create a thread we start it, and then it runs until it finishes and it dies.

   * the Thread class's static methods refer to the current thread

   * Thread.sleep() method is used to pause the execution of current thread for specified time in milliseconds.

   * thread.join: The join method is also a method of the Thread class and is used to wait for another thread to finish its
     execution. When a thread calls join on another thread, it will block until the joined thread completes. This is
     useful for coordinating the execution of multiple threads


 3- Concurrency Issues:(To build multi-threaded applications)
    * Thread safe code: is code that can be safely accessed by multiple threads, and will always behave the way it was intended to.
    * Race condition: Multiple threads are racing to modify the same data at the same time.
    * Visibility Problem: One thread is modifying data, and another thread is trying to read the same data.



  ** ** ** Strategies for Thread Safety ** ** **

  1- Confinement: Is the most simple strategy, the commune resource will be handled by a single thread. and each thread will
     have its own copy of the resource to store its data. then we combine the results of all threads to get the final result.
     like the example of the bank account, we can have a thread for each transaction, and each thread will hold the amount of
     the transaction, and then we combine the results of all threads to get the final balance.

  2- Locks: we can use locks to make sure that only one thread can access the resource at a time. this achieved via ReentrantLock
     class. we can use the lock() method to acquire the lock, and then use the unlock() method to release the lock. this lock
     must be released in a finally block to make sure that it will be released even if an exception is thrown.
     * Locks are not recommended because we lose the multi-threading benefits, cause our code will run in a sequential way.


  3- synchronized keyword: we can use the synchronized keyword to make sure that only one thread can access the resource at a time.
     We can use it with a method or a block of code.
   - When we use it with a method, it will lock the whole method, and when we use
     it with a block of code, it will lock only the block of code. The second way is better cause it give us more control over the
     locking process.
   - We can use the synchronized keyword with any object. However, it is recommended to use it with a private final Object
     cause if we use it we the object itself, so any synchronized block of code that uses the same object will be locked,
     which causes unnecessary locking.

   - it's not recommended to use the synchronized keyword at all because we lose the multi-threading benefits, cause our code will
     run in a sequential way, and we may have many deadlocks.


  4- volatile keyword: we can use the volatile keyword to make sure that the value of a variable will be read from the main memory
     and not from the cache memory, cause if we rely on the cache memory, the changes made by one thread may not be visible to others.
   - volatile keyword is used to mark a Java variable as "being stored in main memory".
   - it solves just the visibility problem and not the race condition problem.
   - note that if the first thread completes before starting the 2nd thread, we will not have any problem, cause the 2nd thread
     will read the value from the main memory, and not from the cache memory. even if the two threads are running writing above
     each other, cause the execution is rapid.

  5- wait and notify keywords: we can use them if a thread wants to wait for another thread to change the state of a shared object.
     it's helpful, unlike the infinite loop that we use to check the state of the shared object cause it consumes CPU resources.

   - we must wrap the wait and notify keywords in a synchronized block of code.
   - wait() method: causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method
     for this object.
   - notify() method: wakes up a single thread that is waiting on this object's monitor.
   - notifyAll() method: wakes up all threads that are waiting on this object's monitor.

   /* When a thread invokes `wait()` inside a `synchronized` block, it temporarily releases the lock it holds (in this case,
      the lock on the `status` object) and goes into a "waiting" state. This allows other threads to enter the `synchronized`
      block and access the shared resource (in this case, the `status` object).

      In your provided code, when `thread2` reaches the `status.wait()` line, it releases the lock on `status`, allowing other threads,
      such as `thread1`, to enter the synchronized block and access the `status` object. `thread1` can then update the `status` object
      and call `status.notifyAll()` when it's done.

      The purpose of releasing the lock temporarily with `wait()` is to allow coordination between threads. It ensures that `thread1`
      can notify `thread2` when the download is complete. When `thread2` is awakened from its wait state by `notifyAll()`, it will reacquire
      the lock on `status` (if it's the next to be scheduled by the thread scheduler) and continue its execution, checking the `status` to see
      if the download is complete.

      So, in summary, when a thread is waiting using `wait()`, it temporarily releases the lock and allows other threads to enter
      the synchronized block, but it can regain the lock when it's reawakened, ensuring proper synchronization and coordination between threads.
      */


  6- atomic objects (uses CAS): Atomic operations allow multiple threads to access and modify data concurrently without the risk of data races.
       In Java, the increment operation a++ on a normal integer variable a is not an atomic operation. It involves three separate steps:
       * Load: The current value of a is loaded from memory.
       ** Increment: The loaded value is incremented by 1.
       *** Store: The incremented value is stored back in memory.
       These steps are not atomic, meaning they can be interrupted by other threads, which can lead to data inconsistency in
       a multithreaded environment.

       On the other hand, AtomicInteger’s incrementAndGet() method in Java provides an atomic increment operation. Here’s how it works:
       * Load: The current value of the AtomicInteger is loaded from memory.
       ** Increment: The loaded value is incremented by 1.
       *** Compare and Swap (CAS): The incremented value is written back to memory only if the original value has not been changed
           since it was loaded. If the value has been changed (by another thread), the operation is retried until it succeeds.
           This ensures that the increment operation is atomic.


  7- Adder Classes (uses striping): if we have multiple threads update a value frequently preferred Adders to atomic types.
     Some key differences between adders and atomic types are:
     some key differences:
     Contended Scenarios:
      Atomic Types: In scenarios where there is high contention (many threads accessing the same variable concurrently),
      traditional atomic types might become a bottleneck due to frequent contention for the single underlying value.

      Adders: Adders, especially LongAdder and DoubleAdder, are designed to reduce contention by spreading the updates across
      multiple variables. Each thread has its own variables to update, and the final result is calculated by summing these variables.

      adders like LongAdder are designed for even better performance than atomics in scenarios with high contention (many threads trying to update
      the value concurrently). They use a different strategy, called "striping," where the updates are distributed across multiple
      variables. This reduces contention, as each thread is more likely to update a different variable, minimizing the need for synchronization.

